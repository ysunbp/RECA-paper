import numpy as np
import os
import csv
import time
from tqdm import trange
from tqdm import tqdm
import json
import jsonlines

# This file use jaccard to filter the json files generated by make_json_input.py

def jaccard(list1, list2):
    intersection = len(list(set(list1).intersection(list2)))
    union = (len(list1)+len(list2)) - intersection
    return float(intersection)/union

def read_tables(path):
    csv_reader = csv.reader(open(path))
    cur_set = []
    for i, line in enumerate(csv_reader):
        if i > 0:
            cur_set += line
    return list(set(cur_set))

def compute_jaccard(pathways):
    table_content = {}
    jaccard_dict = {}
    for pathway in pathways:
        for file_name in os.listdir(pathway):
            file_path = pathway + file_name
            table_content[file_name] = read_tables(file_path)
    total_length = len(table_content)
    for i in trange(total_length):
        list1_key = list(table_content.keys())[i]
        list1 = table_content[list1_key]
        for j in range(i+1,total_length):
            list2_key = list(table_content.keys())[j]
            list2 = table_content[list2_key]
            jaccard_value = jaccard(list1, list2)
            if jaccard_value > 0.1:
                if not list2_key in jaccard_dict.keys():
                    jaccard_dict[list2_key] = [(list1_key, jaccard_value)]
                else:
                    jaccard_dict[list2_key].append((list1_key, jaccard_value))
                if not list1_key in jaccard_dict.keys():
                    jaccard_dict[list1_key] = [(list2_key, jaccard_value)]
                else:
                    jaccard_dict[list1_key].append((list2_key, jaccard_value))
        if not list1_key in jaccard_dict.keys():
            jaccard_dict[list1_key] = []
            
    sorted_jaccard_dict = {}
    for key in jaccard_dict.keys():
        sorted_jaccard_dict[key] = sorted(jaccard_dict[key], key=lambda item:item[1], reverse=True)
    return sorted_jaccard_dict


pathways = ["../data/raw_data/Round1/tables/", "../data/raw_data/Round3/tables/", "../data/raw_data/Round4/tables/"]

jaccard_dict = compute_jaccard(pathways)
updated_jaccard_dict = {}
for key in jaccard_dict.keys():
    updated_jaccard_dict[key] = []
    for value in jaccard_dict[key]:
        updated_jaccard_dict[key].append(value[0])



outpath1 = '../data/jsonl_data/test_hard_jaccard_ranking.jsonl'
outpath2 = '../data/jsonl_data/train_val_hard_jaccard_ranking.jsonl'

out_test = []
out_train = []




with open('../data/jsonl_data/train_val_hard.jsonl', 'r+', encoding='utf8') as f:
    for item in jsonlines.Reader(f):
        current_dict = item
        cur_filename = current_dict['filename']
        jaccard_set = updated_jaccard_dict[cur_filename]
        remained_related = []
        remained_rel_col = []
        for item in updated_jaccard_dict[cur_filename]:
            if not item in current_dict['related_table']:
                continue
            else:
                i = current_dict['related_table'].index(item)
                remained_related.append(current_dict['related_table'][i])
                remained_rel_col.append(current_dict['related_cols'][i])
        remained_sub_related = []
        remained_sub_rel_col = []
        for item in updated_jaccard_dict[cur_filename]:
            if not item in current_dict['subtable']:
                continue
            else:
                i = current_dict['subtable'].index(item)
                remained_sub_related.append(current_dict['subtable'][i])
                remained_sub_rel_col.append(current_dict['sub_related_cols'][i])
        updated_dict = current_dict
        updated_dict['related_table'] = remained_related
        updated_dict['related_cols'] = remained_rel_col
        updated_dict['subtable'] = remained_sub_related
        updated_dict['sub_related_cols'] = remained_sub_rel_col
        out_train.append(updated_dict)

with open('../data/jsonl_data/test_hard.jsonl', 'r+', encoding='utf8') as f:
    for item in jsonlines.Reader(f):
        
        current_dict = item
        cur_filename = current_dict['filename']
        jaccard_set = updated_jaccard_dict[cur_filename]
        remained_related = []
        remained_rel_col = []
        for item in updated_jaccard_dict[cur_filename]:
            if not item in current_dict['related_table']:
                continue
            else:
                i = current_dict['related_table'].index(item)
                remained_related.append(current_dict['related_table'][i])
                remained_rel_col.append(current_dict['related_cols'][i])
        remained_sub_related = []
        remained_sub_rel_col = []
        for item in updated_jaccard_dict[cur_filename]:
            if not item in current_dict['subtable']:
                continue
            else:
                i = current_dict['subtable'].index(item)
                remained_sub_related.append(current_dict['subtable'][i])
                remained_sub_rel_col.append(current_dict['sub_related_cols'][i])
        updated_dict = current_dict
        updated_dict['related_table'] = remained_related
        updated_dict['related_cols'] = remained_rel_col
        updated_dict['subtable'] = remained_sub_related
        updated_dict['sub_related_cols'] = remained_sub_rel_col
        out_test.append(updated_dict)


        
for i in trange(len(out_test)):
    with jsonlines.open(outpath1, "a") as writer:
        writer.write(out_test[i])

for i in trange(len(out_train)):
    with jsonlines.open(outpath2, "a") as writer:
        writer.write(out_train[i])

